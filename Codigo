#include <stdio.h>
#include <math.h>

double calcularSeno(double x, double epsilon) {
    double sinx = 0.0;
    double term = x;
    double power = x;
    int n = 1;
    int sign = 1;

    while (fabs(term) >= epsilon) {
        sinx += term;
        power *= x * x;
        n += 2;
        sign *= -1;
        term = (sign * power) / (double)factorial(n);
    }

    return sinx;
}

double calcularCoseno(double x, double epsilon) {
    double cosx = 1.0;
    double term = 1.0;
    double power = x * x;
    int n = 2;
    int sign = -1;

    while (fabs(term) >= epsilon) {
        cosx += term;
        power *= x * x;
        n += 2;
        sign *= -1;
        term = (sign * power) / (double)factorial(n);
    }

    return cosx;
}

int factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

int main() {
    double x, epsilon;
    printf("Introdueix el valor de x: ");
    scanf("%lf", &x);
    printf("Introdueix el valor de epsilon: ");
    scanf("%lf", &epsilon);

    double sinx = calcularSeno(x, epsilon);
    double cosx = calcularCoseno(x, epsilon);

    printf("Approximations from truncated series:\n");
    printf("cos= %lf sin= %lf\n", cosx, sinx);

    double sinStd = sin(x);
    double cosStd = cos(x);

    printf("Approximations from standard functions:\n");
    printf("cos= %lf sin= %lf\n", cosStd, sinStd);

    double errorSin = fabs(sinx - sinStd);
    double errorCos = fabs(cosx - cosStd);

    printf("Error estimates: %e %e\n", errorSin, errorCos);
    printf("Maximum degree of the term added: %d\n", (epsilon <= 1) ? n - 2 : n - 1);

    return 0;
}
